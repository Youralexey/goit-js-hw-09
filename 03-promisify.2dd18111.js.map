{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","logger","time","setTimeout","console","log","then","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","logger1","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","arr","logError","warn","amount","catch"],"mappings":";AAKA,MAAMA,EAAQC,GACLC,QAAQC,QAAQF,GAGnBG,EAASC,GAAQC,WAAW,KAAQC,QAAQC,sBAAsBH,QAAaA,GAIrFL,EAAM,KAAMS,KAAKL,GACjBJ,EAAM,KAAMS,KAAKL,GACjBJ,EAAM,MAAMS,KAAKL,GAKjB,MAAMM,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAGxDhB,OAAAA,QAAQC,QAAQa,IAEnBG,EAAUH,GAAgBT,QAAQC,IAAIQ,GAO5CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,QAAQD,KAAKU,GAMpC,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB3B,MAAAA,EAAQoB,EAA0B,IAAK,KAEtC,OAAA,IAAIlB,QAAQ,CAACC,EAASyB,KAC3BtB,WAAW,KACUiB,KAAKE,SAAW,GAGjCtB,EAAQ,CAACwB,EAAYE,GAAI7B,IAEzB4B,EAAOD,EAAYE,KAEpB7B,MAID8B,EAAcC,IAClBxB,QAAQC,mBAAmBuB,EAAI,mBAAmBA,EAAI,SAGlDC,EAAWH,IACftB,QAAQ0B,qCAAqCJ,+BAW/CH,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,MAAOzB,KAAKqB,GAAYK,MAAMH","file":"03-promisify.2dd18111.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\n//Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n//Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\n\n\nconst delay = ms => {\n  return Promise.resolve(ms)\n};\n\nconst logger = time => setTimeout(() => { console.log(`Resolved after ${time}ms`) }, time);\n\n// Tests\n\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\n//Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \n//а принимала всего два параметра allUsers и username и возвращала промис.\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === username ? { ...user, active: !user.active } : user\n  );\n\n  return Promise.resolve(updatedUsers);\n};\nconst logger1 = updatedUsers => console.log(updatedUsers);\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(logger1);\ntoggleUserState(users, 'Ajax').then(logger1);\n\n// ======================= Subtask 3 =======================\n//Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\n//а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve([transaction.id, delay]);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (arr) => {\n  console.log(`Transaction ${arr[0]} processed in ${arr[1]}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}